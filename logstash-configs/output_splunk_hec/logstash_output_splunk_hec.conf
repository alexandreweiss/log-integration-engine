input {
    udp {
        port => 5000
        type => syslog
    }
    tcp {
        port => 5000
        type => syslog
    }
}

#fqdn related message
filter {
    if [type] == "syslog" {
        grok {
            id => "fqdn"
            patterns_dir => ["/usr/share/logstash/patterns"]
            add_tag => ["fqdn"]
            break_on_match => true
            match => {
                "message" => [
                "%{SYSLOG_TIMESTAMP:date}.*AviatrixFQDNRule.*Gateway=%{HOSTNAME:gateway}.*S_IP=%{IP:sip}.*D_IP=%{IP:dip}.*hostname=%{HOSTNAME:hostname}.*state=%{WORD:state}.*drop_reason=%{WORD:drop}.*Rule=%{RULE:rule}.*",
                "%{SYSLOG_TIMESTAMP:date}.*AviatrixFQDNRule.*Gateway=%{HOSTNAME:gateway}.*S_IP=%{IP:sip}.*D_IP=%{IP:dip}.*hostname=%{HOSTNAME:hostname}.*state=%{WORD:state}.*Rule=%{RULE:rule}.*",
                "%{SYSLOG_TIMESTAMP:date}.*AviatrixFQDNRule.*Gateway=%{HOSTNAME:gateway}.*S_IP=%{IP:sip}.*D_IP=%{IP:dip}.*hostname=%{HOSTNAME:hostname}.*state=%{WORD:state}.*drop_reason=%{WORD:drop}",
                "%{SYSLOG_TIMESTAMP:date}.*AviatrixFQDNRule.*Gateway=%{HOSTNAME:gateway}.*S_IP=%{IP:sip}.*D_IP=%{IP:dip}.*hostname=%{HOSTNAME:hostname}.*state=%{WORD:state}.*"
                ]
            }
        }
    }
}

filter {
    if [type] == "syslog" and !("fqdn" in [tags]) {
        grok {
            id => "cmd-v1"
            patterns_dir => ["/usr/share/logstash/patterns"]
            break_on_match => true
            add_tag => ["cmd", 'V1Api']
            remove_tag => ["_grokparsefailure"]
            match => {
                "message" => [
                "%{SYSLOG_TIMESTAMP:date}.*AviatrixCMD.*action=%{WORD:action}, argv=%{GREEDYDATA:args}, result=%{GREEDYDATA:result}, reason=%{GREEDYDATA:reason}, username=%{GREEDYDATA:username}",
                "%{SYSLOG_TIMESTAMP:date}.*AviatrixCMD.*action=%{WORD:action}, argv=%{GREEDYDATA:args}, result=%{GREEDYDATA:result}, reason=%{GREEDYDATA:reason}"
                ]
            }
        }
    }
}

filter {
    if [type] == "syslog" and !("fqdn" in [tags]) {
        grok {
            id => "cmd-v2"
            patterns_dir => ["/usr/share/logstash/patterns"]
            break_on_match => true
            add_tag => ["cmd", "V2.5API"]
            remove_tag => ["_grokparsefailure"]
            match => {
                "message" => [
                "%{SYSLOG_TIMESTAMP:date}.*AviatrixAPI.*url=%{GREEDYDATA:action} user=%{GREEDYDATA:username}? req_data=%{GREEDYDATA:args} resp_status=%{GREEDYDATA:result} resp_data=%{GREEDYDATA:reason}"
                ]
            }

        }
    }
}

#microseg logs
filter {
    if [type] == "syslog" and !("fqdn" in [tags] or "cmd" in [tags]) {
        grok {
            id => "microseg"
            patterns_dir => ["/usr/share/logstash/patterns"]
            break_on_match => true
            add_tag => [
            "microseg",
            "ebpf"
            ]
            remove_tag => ["_grokparsefailure"]
            match => {
                "message" => [
                "^<%{NUMBER}>%{SPACE}(%{MONTH} +%{MONTHDAY} +%{TIME} +%{HOSTNAME}-%{IP} syslog )?%{SYSLOG_TIMESTAMP:date} +GW-%{HOSTNAME:gw_hostname}-%{IP} +%{PATH}(\[%{NUMBER}\]:)? +%{YEAR}\/%{SPACE}%{MONTHNUM}\/%{SPACE}%{MONTHDAY} +%{TIME} +AviatrixGwMicrosegPacket: POLICY=%{UUID:uuid} SRC_MAC=%{MAC:src_mac} DST_MAC=%{MAC:dst_mac} IP_SZ=%{NUMBER} SRC_IP=%{IP:src_ip} DST_IP=%{IP:dst_ip} PROTO=%{WORD:proto} SRC_PORT=%{NUMBER:src_port} DST_PORT=%{NUMBER:dst_port} DATA=%{GREEDYDATA} ACT=%{WORD:action} ENFORCED=%{WORD:enforced}",
                "^<%{NUMBER}>%{SPACE}(%{MONTH} +%{MONTHDAY} +%{TIME} +%{HOSTNAME}-%{IP} syslog )?%{SYSLOG_TIMESTAMP:date} +GW-%{HOSTNAME:gw_hostname}-%{IP} +%{PATH}(\[%{NUMBER}\]:)? +%{YEAR}\/%{SPACE}%{MONTHNUM}\/%{SPACE}%{MONTHDAY} +%{TIME} +AviatrixGwMicrosegPacket: POLICY=%{UUID:uuid} SRC_MAC=%{MAC:src_mac} DST_MAC=%{MAC:dst_mac} IP_SZ=%{NUMBER} SRC_IP=%{IP:src_ip} DST_IP=%{IP:dst_ip} PROTO=%{WORD:proto} SRC_PORT=%{NUMBER:src_port} DST_PORT=%{NUMBER:dst_port} DATA=%{GREEDYDATA}"
                ]
            }
            remove_field => [
            #"message",
            "event",
            "@version",
            "type",
            "host"
            ]
        }
    }
}


# mitm
filter {
    if [type] == "syslog" and !("fqdn" in [tags] or "cmd" in [tags] or "microseg" in [tags]) {
        grok {
            id => "mitm"
            patterns_dir => ["/usr/share/logstash/patterns"]
            break_on_match => true
            add_tag => ["mitm"]
            remove_tag => ["_grokparsefailure"]
            match => {
                "message" => [
                "^<%{NUMBER}>%{SPACE}(%{MONTH} +%{MONTHDAY} +%{TIME} +%{HOSTNAME}-%{IP} syslog )?%{MONTH} +%{MONTHDAY} +%{TIME} +GW-%{HOSTNAME:gw_hostname}-%{IP} traffic_server(\[%{NUMBER}\]:)? %{GREEDYDATA:[@metadata][json_payload]}$"
                ]
            }
            remove_field => [
            #"message",
            "event",
            "@version",
            "type",
            "host"
            ]
        }

        if "mitm" in [tags] {
            json {
                id => "mitm-json"
                skip_on_invalid_json => true
                source => "[@metadata][json_payload]"
                target => "[@metadata][payload]"
            }
        }

        # convert mitm to microseg format
        if "mitm" in [tags] and [@metadata][payload] and "_jsonparsefailure" not in [tags] {
            # use timestamp provided by mitm instead of syslog timestamp
            date {
                id => "mitm-timestamp"
                match => [ "[@metadata][payload][timestamp]", "UNIX" ]
                target => "@timestamp"
                remove_field => "date"
            }

            # Map mitm fields to microseg fields
            mutate {
                id => "mitm-map-to-microseg"
                add_field => {
                    "proto" => "TCP"
                    "action" => "%{[@metadata][payload][action]}"
                    "src_ip" => "%{[@metadata][payload][src]}"
                    "src_port" => "%{[@metadata][payload][src_port]}"
                    "dst_ip" => "%{[@metadata][payload][dest]}"
                    "dst_port" => "%{[@metadata][payload][dest_port]}"
                    "enforced" => "%{[@metadata][payload][enforced]}"
                    "uuid" => "%{[@metadata][payload][decided_by]}"
                    "mitm_sni_hostname" => "%{[@metadata][payload][sni_hostname]}"
                }
            }

            if [@metadata][payload][action] == "DROP" {
                mutate {
                    id => "mitm-map-drop-to-deny"
                    replace => {
                        "[@metadata][payload][action]" => "DENY"
                    }
                }
            }

            if [@metadata][payload][url] {
                mutate {
                    id => "mitm-url-parts"
                    add_field => {
                        "mitm_url_parts" => "%{[@metadata][payload][url]}"
                    }
                }
            }

            if [@metadata][payload][decrypted_by] {
                mutate {
                    id => "mitm-decrypted-by"
                    add_field => {
                        "mitm_decrypted_by" => "%{[@metadata][payload][decrypted_by]}"
                    }
                }
            }

            # add the microseg tag
            mutate {
                id => "mitm-add-microseg-tag"
                add_tag => ["microseg"]
            }

            clone {
                clones => ["fqdn"]
                add_tag => ["fqdn"]
            }
        }
    }
}

filter {
    if "fqdn" in [tags] and "mitm" in [tags] and "microseg" in [tags] {
        if [@metadata][payload][url] {
            mutate {
                id => "fqdn-mitm-add-url"
                add_field => {
                    "url" => "%{[@metadata][payload][url]}"
                }
            }
        }

        # Map mitm microseg fields to fqdn fields
        mutate {
            id => "fqdn-mitm-map-to-fqdn"
            add_field => {
                "sip" => "%{[@metadata][payload][src]}"
                "dip" => "%{[@metadata][payload][dest]}"
                "gateway" => "%{[gw_hostname]}"
                "state" => "MATCHED"
                "hostname" => "%{[@metadata][payload][sni_hostname]}"
                "rule" => "%{[@metadata][payload][sni_hostname]};%{[@metadata][payload][dest_port]}"
            }
            remove_tag => ["microseg", "mitm"]
            remove_field => ["mitm_url_parts", "mitm_decrypted_by", "mitm_sni_hostname", "src_ip", "src_port", "dst_ip", "dst_port", "enforced", "gw_hostname"]
        }
    }
}


# throttle l4 microseg logs
filter {
    if "microseg" in [tags] and "mitm" not in [tags] {
        # This config will throttle the logs for each connection to
        #  max 2 logs/minute (src -> dest and src <- dest).
        throttle {
            id => "microseg-throttle"
            key => "%{uuid}%{src_ip}%{dest_ip}%{src_port}%{dst_port}%{proto}"
            max_age => 120
            period => "60"
            after_count => 1
            add_tag => "throttled"
        }
    }
}

filter {
    if "throttled" in [tags] {
        drop {
            id => "microseg-throttled"
        }
    }
}

filter {
    if "microseg" in [tags] {
        mutate {
            id => "microseg-field-conversion"
            convert => {
                "src_port" => "integer"
                "dst_port" => "integer"
                "enforced" => "boolean"
            }
        }
    }
}


# suricata
filter {
    if [type] == "syslog" {
        grok {
            id => "suricata"
            patterns_dir => ["/usr/share/logstash/patterns"]
            break_on_match => true
            add_tag => ["suricata"]
            match => {
                "message" => [
                "^<%{NUMBER}>%{SPACE}(%{MONTH} +%{MONTHDAY} +%{TIME} +%{HOSTNAME}-%{IP} syslog )?%{SYSLOG_TIMESTAMP:date} +%{HOSTNAME:gw_hostname}-%{IP} suricata(\[%{NUMBER}\]:)? %{GREEDYDATA:suricataData}"
                ]
            }
        }
        if "suricata" in [tags] and [suricataData] =~ "\A\{.+\}\z" {
            json {
                id => "suricata-data"
                skip_on_invalid_json => true
                source => "suricataData"
                target => "suricataDataJson"
            }
        }

        if "_jsonparsefailure" in [tags] {
            drop {
            }
        }

        if [suricataDataJson][event_type] == "stats" {
            drop {
            }
        }
    }
}

#set date
filter {
    date {
        id => "date-to-timestamp"
        # The timestamp format MMM dd HH:mm:ss is used by the new syslog format
        # i.e. May 14 03:46:16
        match => [ "date", "ISO8601", "yyyy-MM-dd HH:mm:ss.SSSSSS", "MMM dd HH:mm:ss" ]
        target => "@timestamp"
        remove_field => [ "date" ]
    }
    ruby {
        code => "event.set('unix_time', event.get('@timestamp').to_i)"
    }
}

output {
    # Splunk HTTP Event Collector outputs
    if "suricata" in [tags] {
        http {
            http_method => "post"
            url => "${SPLUNK_ADDRESS}:${SPLUNK_PORT:8088}/services/collector/event"
            headers => ["Authorization", "Splunk ${SPLUNK_HEC_AUTH}"]
            ssl_verification_mode => "none"
            format => "json"
            mapping => {
                "host" => "%{gw_hostname}"
                "event" => "%{suricataData}"
                "source" => "avx-ids"
                "time" => "%{unix_time}"
            }
        }
    }
    else if "mitm" in [tags] {
        http {
            http_method => "post"
            url => "${SPLUNK_ADDRESS}:${SPLUNK_PORT:8088}/services/collector/event"
            headers => ["Authorization", "Splunk ${SPLUNK_HEC_AUTH}"]
            ssl_verification_mode => "none"
            format => "json"
            mapping => {
                "host" => "%{gw_hostname}"
                "event" => "%{[@metadata][payload]}"
                "source" => "avx-l7-fw"
                "time" => "%{unix_time}"
            }
        }
    }
    else if "microseg" in [tags] {
        http {
            http_method => "post"
            url => "${SPLUNK_ADDRESS}:${SPLUNK_PORT:8088}/services/collector/event"
            headers => ["Authorization", "Splunk ${SPLUNK_HEC_AUTH}"]
            ssl_verification_mode => "none"
            format => "json"
            mapping => {
                "host" => "%{gw_hostname}"
                "event" => {
                    "proto" => "%{proto}"
                    "action" => "%{action}"
                    "src_ip" => "%{src_ip}"
                    "src_port" => "%{src_port}"
                    "dst_ip" => "%{dst_ip}"
                    "dst_port" => "%{dst_port}"
                    "enforced" => "%{enforced}"
                    "uuid" => "%{uuid}"
                    "syslog" => "%{message}"
                    "timestamp" => "%{unix_time}"
                }
                "source" => "avx-l4-fw"
                "time" => "%{unix_time}"
            }
        }
    }

    else if  "fqdn" in [tags] {
        http {
            http_method => "post"
            url => "${SPLUNK_ADDRESS}:${SPLUNK_PORT:8088}/services/collector/event"
            headers => ["Authorization", "Splunk ${SPLUNK_HEC_AUTH}"]
            ssl_verification_mode => "none"
            format => "json"
            mapping => {
                "host" => "%{gateway}"
                "event" => {
                    "sip" => "%{sip}"
                    "dip" => "%{dip}"
                    "gateway" => "%{gateway}"
                    "state" => "%{state}"
                    "hostname" => "%{hostname}"
                    "rule" => "%{rule}"
                    "syslog" => "%{message}"
                    "timestamp" => "%{unix_time}"
                }
                "source" => "avx-fqdn"
                "time" => "%{unix_time}"
            }
        }
    }

    else if "cmd" in [tags] {
        http {
            http_method => "post"
            url => "${SPLUNK_ADDRESS}:${SPLUNK_PORT:8088}/services/collector/event"
            headers => ["Authorization", "Splunk ${SPLUNK_HEC_AUTH}"]
            ssl_verification_mode => "none"
            format => "json"
            mapping => {
                "host" => "%{gw_hostname}"
                "event" => {
                    "action" => "%{action}"
                    "args" => "%{args}"
                    "result" => "%{result}"
                    "reason" => "%{reason}"
                    "username" => "%{username}"
                    "syslog" => "%{message}"
                    "timestamp" => "%{unix_time}"
                }
                "source" => "avx-cmd"
                "time" => "%{unix_time}"
            }
        }
    }
}